# --- Import Libraries ---
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# --- Load Dataset ---
df = pd.read_csv("daily_data_combined_2010_to_present_Malang.csv")

# --- Select Features & Target ---
features = [
    "temperature_2m_min",
    "temperature_2m_max",
    "temperature_2m_mean",
    "precipitation_sum",
    "precipitation_hours"
]

X = df[features]
y = df["weather_code"]   # Target classes (Clear, Drizzle, Heavy Rain)

# --- Normalize Features ---
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# --- Split Dataset ---
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42, stratify=y
)

# --- Dimensionality Reduction (Optional) ---
pca = PCA(n_components=2)
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

# --- Train SVM Model ---
svm_model = SVC(kernel="rbf", C=1.0, gamma="scale")
svm_model.fit(X_train, y_train)

# --- Predictions ---
y_pred = svm_model.predict(X_test)

# --- Evaluation ---
print("Training Accuracy :", accuracy_score(y_train, svm_model.predict(X_train)))
print("Testing Accuracy  :", accuracy_score(y_test, y_pred))

# Cross Validation
cv_scores = cross_val_score(svm_model, X_scaled, y, cv=5)
print("Cross-validation Accuracy: %0.2f (+/- %0.2f)" % (cv_scores.mean(), cv_scores.std()))

# Classification Report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix Visualization
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=svm_model.classes_,
            yticklabels=svm_model.classes_)
plt.title("Confusion Matrix - Weather Prediction with SVM")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()
